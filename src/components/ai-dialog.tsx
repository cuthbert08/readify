'use client';

import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Loader2, Send } from 'lucide-react';
import type { SummarizePdfOutput } from '@/ai/flows/summarize-pdf';
import type { ChatWithPdfOutput } from '@/ai/flows/chat-with-pdf';
import type { GenerateGlossaryOutput } from '@/ai/flows/glossary-flow';
import type { ExplainTextOutput } from '@/ai/flows/explain-text-flow';
import { ScrollArea } from './ui/scroll-area';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from './ui/accordion';

export type AiDialogType = 'summary' | 'key-points' | 'chat' | 'glossary' | 'explain';

type AiDialogProps = {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  type: AiDialogType;
  isLoading: boolean;
  summaryOutput: SummarizePdfOutput | null;
  chatOutput: ChatWithPdfOutput | null;
  glossaryOutput: GenerateGlossaryOutput | null;
  explanationOutput: ExplainTextOutput | null;
  onChatSubmit: (question: string) => void;
};

const AiDialog: React.FC<AiDialogProps> = ({
  open,
  onOpenChange,
  type,
  isLoading,
  summaryOutput,
  chatOutput,
  glossaryOutput,
  explanationOutput,
  onChatSubmit,
}) => {
  const [question, setQuestion] = useState('');

  const handleChatSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (question.trim()) {
      onChatSubmit(question);
      setQuestion('');
    }
  };

  const renderLoading = (text: string) => (
    <div className="flex items-center justify-center space-x-2 h-full">
      <Loader2 className="animate-spin" />
      <span>{text}</span>
    </div>
  )

  const renderSummaryContent = () => (
    <>
      <DialogHeader>
        <DialogTitle>AI Analysis</DialogTitle>
        <DialogDescription>
          Here's a summary and key points generated by the AI based on the document's content.
        </DialogDescription>
      </DialogHeader>
      <Tabs defaultValue={type === 'key-points' ? 'key-points' : 'summary'} className="w-full pt-4">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="summary">Summary</TabsTrigger>
          <TabsTrigger value="key-points">Key Points</TabsTrigger>
        </TabsList>
        <ScrollArea className="h-96">
          <TabsContent value="summary" className="p-4">
            <h3 className="text-lg font-semibold mb-2">Summary</h3>
            {isLoading ? renderLoading('Generating summary...') : (
              <p className="text-sm text-muted-foreground whitespace-pre-wrap">
                {summaryOutput?.summary || 'No summary available.'}
              </p>
            )}
          </TabsContent>
          <TabsContent value="key-points" className="p-4">
            <h3 className="text-lg font-semibold mb-2">Key Points</h3>
            {isLoading ? renderLoading('Extracting key points...') : (
              <ul className="list-disc pl-5 space-y-2 text-sm text-muted-foreground">
                {summaryOutput?.keyPoints?.map((point, index) => (
                  <li key={index}>{point}</li>
                )) || <li>No key points available.</li>}
              </ul>
            )}
          </TabsContent>
        </ScrollArea>
      </Tabs>
    </>
  );

  const renderGlossaryContent = () => (
    <>
        <DialogHeader>
            <DialogTitle>Glossary</DialogTitle>
            <DialogDescription>Key terms and concepts identified from the document by the AI.</DialogDescription>
        </DialogHeader>
        <ScrollArea className="h-96 pr-4">
            {isLoading ? renderLoading('Creating glossary...') : (
                 <Accordion type="single" collapsible className="w-full">
                    {glossaryOutput?.glossary?.map((item, index) => (
                        <AccordionItem value={`item-${index}`} key={index}>
                            <AccordionTrigger>{item.term}</AccordionTrigger>
                            <AccordionContent>
                                {item.definition}
                            </AccordionContent>
                        </AccordionItem>
                    ))}
                </Accordion>
            )}
        </ScrollArea>
    </>
  );
  
  const renderExplanationContent = () => (
    <>
        <DialogHeader>
            <DialogTitle>Explanation</DialogTitle>
            <DialogDescription>Here is a simplified explanation of the selected text.</DialogDescription>
        </DialogHeader>
        <ScrollArea className="h-auto max-h-96 pr-4 mt-4">
            {isLoading ? renderLoading('Thinking...') : (
                <p className="text-sm text-muted-foreground whitespace-pre-wrap">
                    {explanationOutput?.explanation || 'No explanation available.'}
                </p>
            )}
        </ScrollArea>
    </>
  );

  const renderChatContent = () => (
    <div className="flex flex-col h-[32rem]">
      <DialogHeader>
        <DialogTitle>Ask a Question</DialogTitle>
        <DialogDescription>
          Ask a question about the document, and the AI will find the answer for you.
        </DialogDescription>
      </DialogHeader>
      <ScrollArea className="flex-1 my-4">
         <div className="p-4 space-y-4">
            {isLoading ? renderLoading('Thinking...') : (
                chatOutput && (
                    <div className="p-3 rounded-md bg-muted">
                        <p className="text-sm">{chatOutput.answer}</p>
                    </div>
                )
            )}
        </div>
      </ScrollArea>
      <DialogFooter>
        <form onSubmit={handleChatSubmit} className="flex w-full space-x-2">
          <Input
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            placeholder="Type your question here..."
            disabled={isLoading}
          />
          <Button type="submit" disabled={isLoading || !question.trim()}>
            {isLoading ? <Loader2 className="animate-spin" /> : <Send />}
          </Button>
        </form>
      </DialogFooter>
    </div>
  );

  const renderContent = () => {
    switch (type) {
        case 'summary':
        case 'key-points':
            return renderSummaryContent();
        case 'glossary':
            return renderGlossaryContent();
        case 'explain':
            return renderExplanationContent();
        case 'chat':
            return renderChatContent();
        default:
            return null;
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        {renderContent()}
      </DialogContent>
    </Dialog>
  );
};

export default AiDialog;
